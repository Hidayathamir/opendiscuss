// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Hidayathamir/opendiscuss/api/v1/question/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/Hidayathamir/opendiscuss/model"
)

// IQuestionRepository is an autogenerated mock type for the IQuestionRepository type
type IQuestionRepository struct {
	mock.Mock
}

type IQuestionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IQuestionRepository) EXPECT() *IQuestionRepository_Expecter {
	return &IQuestionRepository_Expecter{mock: &_m.Mock}
}

// CreateQuestion provides a mock function with given fields: ctx, question
func (_m *IQuestionRepository) CreateQuestion(ctx context.Context, question model.Question) (int, error) {
	ret := _m.Called(ctx, question)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) (int, error)); ok {
		return rf(ctx, question)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) int); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Question) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type IQuestionRepository_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.Question
func (_e *IQuestionRepository_Expecter) CreateQuestion(ctx interface{}, question interface{}) *IQuestionRepository_CreateQuestion_Call {
	return &IQuestionRepository_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", ctx, question)}
}

func (_c *IQuestionRepository_CreateQuestion_Call) Run(run func(ctx context.Context, question model.Question)) *IQuestionRepository_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Question))
	})
	return _c
}

func (_c *IQuestionRepository_CreateQuestion_Call) Return(_a0 int, _a1 error) *IQuestionRepository_CreateQuestion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_CreateQuestion_Call) RunAndReturn(run func(context.Context, model.Question) (int, error)) *IQuestionRepository_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuestionStatistic provides a mock function with given fields: ctx, question
func (_m *IQuestionRepository) CreateQuestionStatistic(ctx context.Context, question model.QuestionStatistic) (int, error) {
	ret := _m.Called(ctx, question)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.QuestionStatistic) (int, error)); ok {
		return rf(ctx, question)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.QuestionStatistic) int); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.QuestionStatistic) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_CreateQuestionStatistic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestionStatistic'
type IQuestionRepository_CreateQuestionStatistic_Call struct {
	*mock.Call
}

// CreateQuestionStatistic is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.QuestionStatistic
func (_e *IQuestionRepository_Expecter) CreateQuestionStatistic(ctx interface{}, question interface{}) *IQuestionRepository_CreateQuestionStatistic_Call {
	return &IQuestionRepository_CreateQuestionStatistic_Call{Call: _e.mock.On("CreateQuestionStatistic", ctx, question)}
}

func (_c *IQuestionRepository_CreateQuestionStatistic_Call) Run(run func(ctx context.Context, question model.QuestionStatistic)) *IQuestionRepository_CreateQuestionStatistic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.QuestionStatistic))
	})
	return _c
}

func (_c *IQuestionRepository_CreateQuestionStatistic_Call) Return(_a0 int, _a1 error) *IQuestionRepository_CreateQuestionStatistic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_CreateQuestionStatistic_Call) RunAndReturn(run func(context.Context, model.QuestionStatistic) (int, error)) *IQuestionRepository_CreateQuestionStatistic_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserQuestionVote provides a mock function with given fields: ctx, userQuestionVote
func (_m *IQuestionRepository) CreateUserQuestionVote(ctx context.Context, userQuestionVote model.UserQuestionVote) (int, error) {
	ret := _m.Called(ctx, userQuestionVote)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserQuestionVote) (int, error)); ok {
		return rf(ctx, userQuestionVote)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserQuestionVote) int); ok {
		r0 = rf(ctx, userQuestionVote)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserQuestionVote) error); ok {
		r1 = rf(ctx, userQuestionVote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_CreateUserQuestionVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserQuestionVote'
type IQuestionRepository_CreateUserQuestionVote_Call struct {
	*mock.Call
}

// CreateUserQuestionVote is a helper method to define mock.On call
//   - ctx context.Context
//   - userQuestionVote model.UserQuestionVote
func (_e *IQuestionRepository_Expecter) CreateUserQuestionVote(ctx interface{}, userQuestionVote interface{}) *IQuestionRepository_CreateUserQuestionVote_Call {
	return &IQuestionRepository_CreateUserQuestionVote_Call{Call: _e.mock.On("CreateUserQuestionVote", ctx, userQuestionVote)}
}

func (_c *IQuestionRepository_CreateUserQuestionVote_Call) Run(run func(ctx context.Context, userQuestionVote model.UserQuestionVote)) *IQuestionRepository_CreateUserQuestionVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserQuestionVote))
	})
	return _c
}

func (_c *IQuestionRepository_CreateUserQuestionVote_Call) Return(_a0 int, _a1 error) *IQuestionRepository_CreateUserQuestionVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_CreateUserQuestionVote_Call) RunAndReturn(run func(context.Context, model.UserQuestionVote) (int, error)) *IQuestionRepository_CreateUserQuestionVote_Call {
	_c.Call.Return(run)
	return _c
}

// DecrementQuestionStatisticColumnThumbsDownByQuestionID provides a mock function with given fields: ctx, questionID
func (_m *IQuestionRepository) DecrementQuestionStatisticColumnThumbsDownByQuestionID(ctx context.Context, questionID int) (int, error) {
	ret := _m.Called(ctx, questionID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, questionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, questionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, questionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrementQuestionStatisticColumnThumbsDownByQuestionID'
type IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call struct {
	*mock.Call
}

// DecrementQuestionStatisticColumnThumbsDownByQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - questionID int
func (_e *IQuestionRepository_Expecter) DecrementQuestionStatisticColumnThumbsDownByQuestionID(ctx interface{}, questionID interface{}) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	return &IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call{Call: _e.mock.On("DecrementQuestionStatisticColumnThumbsDownByQuestionID", ctx, questionID)}
}

func (_c *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call) Run(run func(ctx context.Context, questionID int)) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call) RunAndReturn(run func(context.Context, int) (int, error)) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// DecrementQuestionStatisticColumnThumbsUpByQuestionID provides a mock function with given fields: ctx, questionID
func (_m *IQuestionRepository) DecrementQuestionStatisticColumnThumbsUpByQuestionID(ctx context.Context, questionID int) (int, error) {
	ret := _m.Called(ctx, questionID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, questionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, questionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, questionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrementQuestionStatisticColumnThumbsUpByQuestionID'
type IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call struct {
	*mock.Call
}

// DecrementQuestionStatisticColumnThumbsUpByQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - questionID int
func (_e *IQuestionRepository_Expecter) DecrementQuestionStatisticColumnThumbsUpByQuestionID(ctx interface{}, questionID interface{}) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	return &IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call{Call: _e.mock.On("DecrementQuestionStatisticColumnThumbsUpByQuestionID", ctx, questionID)}
}

func (_c *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call) Run(run func(ctx context.Context, questionID int)) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call) RunAndReturn(run func(context.Context, int) (int, error)) *IQuestionRepository_DecrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuestionByID provides a mock function with given fields: ctx, req
func (_m *IQuestionRepository) DeleteQuestionByID(ctx context.Context, req dto.ReqDeleteQuestionByID) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqDeleteQuestionByID) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqDeleteQuestionByID) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ReqDeleteQuestionByID) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_DeleteQuestionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuestionByID'
type IQuestionRepository_DeleteQuestionByID_Call struct {
	*mock.Call
}

// DeleteQuestionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ReqDeleteQuestionByID
func (_e *IQuestionRepository_Expecter) DeleteQuestionByID(ctx interface{}, req interface{}) *IQuestionRepository_DeleteQuestionByID_Call {
	return &IQuestionRepository_DeleteQuestionByID_Call{Call: _e.mock.On("DeleteQuestionByID", ctx, req)}
}

func (_c *IQuestionRepository_DeleteQuestionByID_Call) Run(run func(ctx context.Context, req dto.ReqDeleteQuestionByID)) *IQuestionRepository_DeleteQuestionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ReqDeleteQuestionByID))
	})
	return _c
}

func (_c *IQuestionRepository_DeleteQuestionByID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_DeleteQuestionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_DeleteQuestionByID_Call) RunAndReturn(run func(context.Context, dto.ReqDeleteQuestionByID) (int, error)) *IQuestionRepository_DeleteQuestionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionByID provides a mock function with given fields: ctx, ID
func (_m *IQuestionRepository) GetQuestionByID(ctx context.Context, ID int) (dto.QuestionHighlight, error) {
	ret := _m.Called(ctx, ID)

	var r0 dto.QuestionHighlight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.QuestionHighlight, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.QuestionHighlight); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(dto.QuestionHighlight)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_GetQuestionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionByID'
type IQuestionRepository_GetQuestionByID_Call struct {
	*mock.Call
}

// GetQuestionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int
func (_e *IQuestionRepository_Expecter) GetQuestionByID(ctx interface{}, ID interface{}) *IQuestionRepository_GetQuestionByID_Call {
	return &IQuestionRepository_GetQuestionByID_Call{Call: _e.mock.On("GetQuestionByID", ctx, ID)}
}

func (_c *IQuestionRepository_GetQuestionByID_Call) Run(run func(ctx context.Context, ID int)) *IQuestionRepository_GetQuestionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IQuestionRepository_GetQuestionByID_Call) Return(_a0 dto.QuestionHighlight, _a1 error) *IQuestionRepository_GetQuestionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_GetQuestionByID_Call) RunAndReturn(run func(context.Context, int) (dto.QuestionHighlight, error)) *IQuestionRepository_GetQuestionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionList provides a mock function with given fields: ctx
func (_m *IQuestionRepository) GetQuestionList(ctx context.Context) ([]dto.QuestionHighlight, error) {
	ret := _m.Called(ctx)

	var r0 []dto.QuestionHighlight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.QuestionHighlight, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.QuestionHighlight); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.QuestionHighlight)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_GetQuestionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionList'
type IQuestionRepository_GetQuestionList_Call struct {
	*mock.Call
}

// GetQuestionList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IQuestionRepository_Expecter) GetQuestionList(ctx interface{}) *IQuestionRepository_GetQuestionList_Call {
	return &IQuestionRepository_GetQuestionList_Call{Call: _e.mock.On("GetQuestionList", ctx)}
}

func (_c *IQuestionRepository_GetQuestionList_Call) Run(run func(ctx context.Context)) *IQuestionRepository_GetQuestionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IQuestionRepository_GetQuestionList_Call) Return(_a0 []dto.QuestionHighlight, _a1 error) *IQuestionRepository_GetQuestionList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_GetQuestionList_Call) RunAndReturn(run func(context.Context) ([]dto.QuestionHighlight, error)) *IQuestionRepository_GetQuestionList_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserQuestionVoteByUserIDAndQuestionID provides a mock function with given fields: ctx, req
func (_m *IQuestionRepository) GetUserQuestionVoteByUserIDAndQuestionID(ctx context.Context, req dto.ReqGetUserQuestionVoteByUserIDAndQuestionID) (model.UserQuestionVote, error) {
	ret := _m.Called(ctx, req)

	var r0 model.UserQuestionVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqGetUserQuestionVoteByUserIDAndQuestionID) (model.UserQuestionVote, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqGetUserQuestionVoteByUserIDAndQuestionID) model.UserQuestionVote); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.UserQuestionVote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ReqGetUserQuestionVoteByUserIDAndQuestionID) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserQuestionVoteByUserIDAndQuestionID'
type IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call struct {
	*mock.Call
}

// GetUserQuestionVoteByUserIDAndQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ReqGetUserQuestionVoteByUserIDAndQuestionID
func (_e *IQuestionRepository_Expecter) GetUserQuestionVoteByUserIDAndQuestionID(ctx interface{}, req interface{}) *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call {
	return &IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call{Call: _e.mock.On("GetUserQuestionVoteByUserIDAndQuestionID", ctx, req)}
}

func (_c *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call) Run(run func(ctx context.Context, req dto.ReqGetUserQuestionVoteByUserIDAndQuestionID)) *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ReqGetUserQuestionVoteByUserIDAndQuestionID))
	})
	return _c
}

func (_c *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call) Return(_a0 model.UserQuestionVote, _a1 error) *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call) RunAndReturn(run func(context.Context, dto.ReqGetUserQuestionVoteByUserIDAndQuestionID) (model.UserQuestionVote, error)) *IQuestionRepository_GetUserQuestionVoteByUserIDAndQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementQuestionStatisticColumnThumbsDownByQuestionID provides a mock function with given fields: ctx, questionID
func (_m *IQuestionRepository) IncrementQuestionStatisticColumnThumbsDownByQuestionID(ctx context.Context, questionID int) (int, error) {
	ret := _m.Called(ctx, questionID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, questionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, questionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, questionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementQuestionStatisticColumnThumbsDownByQuestionID'
type IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call struct {
	*mock.Call
}

// IncrementQuestionStatisticColumnThumbsDownByQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - questionID int
func (_e *IQuestionRepository_Expecter) IncrementQuestionStatisticColumnThumbsDownByQuestionID(ctx interface{}, questionID interface{}) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	return &IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call{Call: _e.mock.On("IncrementQuestionStatisticColumnThumbsDownByQuestionID", ctx, questionID)}
}

func (_c *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call) Run(run func(ctx context.Context, questionID int)) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call) RunAndReturn(run func(context.Context, int) (int, error)) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsDownByQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementQuestionStatisticColumnThumbsUpByQuestionID provides a mock function with given fields: ctx, questionID
func (_m *IQuestionRepository) IncrementQuestionStatisticColumnThumbsUpByQuestionID(ctx context.Context, questionID int) (int, error) {
	ret := _m.Called(ctx, questionID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, questionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, questionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, questionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementQuestionStatisticColumnThumbsUpByQuestionID'
type IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call struct {
	*mock.Call
}

// IncrementQuestionStatisticColumnThumbsUpByQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - questionID int
func (_e *IQuestionRepository_Expecter) IncrementQuestionStatisticColumnThumbsUpByQuestionID(ctx interface{}, questionID interface{}) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	return &IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call{Call: _e.mock.On("IncrementQuestionStatisticColumnThumbsUpByQuestionID", ctx, questionID)}
}

func (_c *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call) Run(run func(ctx context.Context, questionID int)) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call) RunAndReturn(run func(context.Context, int) (int, error)) *IQuestionRepository_IncrementQuestionStatisticColumnThumbsUpByQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuestionByID provides a mock function with given fields: ctx, req
func (_m *IQuestionRepository) UpdateQuestionByID(ctx context.Context, req dto.ReqUpdateQuestionByID) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqUpdateQuestionByID) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqUpdateQuestionByID) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ReqUpdateQuestionByID) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_UpdateQuestionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuestionByID'
type IQuestionRepository_UpdateQuestionByID_Call struct {
	*mock.Call
}

// UpdateQuestionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ReqUpdateQuestionByID
func (_e *IQuestionRepository_Expecter) UpdateQuestionByID(ctx interface{}, req interface{}) *IQuestionRepository_UpdateQuestionByID_Call {
	return &IQuestionRepository_UpdateQuestionByID_Call{Call: _e.mock.On("UpdateQuestionByID", ctx, req)}
}

func (_c *IQuestionRepository_UpdateQuestionByID_Call) Run(run func(ctx context.Context, req dto.ReqUpdateQuestionByID)) *IQuestionRepository_UpdateQuestionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ReqUpdateQuestionByID))
	})
	return _c
}

func (_c *IQuestionRepository_UpdateQuestionByID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_UpdateQuestionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_UpdateQuestionByID_Call) RunAndReturn(run func(context.Context, dto.ReqUpdateQuestionByID) (int, error)) *IQuestionRepository_UpdateQuestionByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserQuestionVoteColumnVoteOptionIDByID provides a mock function with given fields: ctx, req
func (_m *IQuestionRepository) UpdateUserQuestionVoteColumnVoteOptionIDByID(ctx context.Context, req dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserQuestionVoteColumnVoteOptionIDByID'
type IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call struct {
	*mock.Call
}

// UpdateUserQuestionVoteColumnVoteOptionIDByID is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID
func (_e *IQuestionRepository_Expecter) UpdateUserQuestionVoteColumnVoteOptionIDByID(ctx interface{}, req interface{}) *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call {
	return &IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call{Call: _e.mock.On("UpdateUserQuestionVoteColumnVoteOptionIDByID", ctx, req)}
}

func (_c *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call) Run(run func(ctx context.Context, req dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID)) *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID))
	})
	return _c
}

func (_c *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call) Return(_a0 int, _a1 error) *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call) RunAndReturn(run func(context.Context, dto.ReqUpdateUserQuestionVoteColumnVoteOptionIDByID) (int, error)) *IQuestionRepository_UpdateUserQuestionVoteColumnVoteOptionIDByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewIQuestionRepository creates a new instance of IQuestionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIQuestionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IQuestionRepository {
	mock := &IQuestionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
