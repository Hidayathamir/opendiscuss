// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Hidayathamir/opendiscuss/api/v1/question/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/Hidayathamir/opendiscuss/model"
)

// IQuestionRepository is an autogenerated mock type for the IQuestionRepository type
type IQuestionRepository struct {
	mock.Mock
}

type IQuestionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IQuestionRepository) EXPECT() *IQuestionRepository_Expecter {
	return &IQuestionRepository_Expecter{mock: &_m.Mock}
}

// CreateQuestion provides a mock function with given fields: ctx, question
func (_m *IQuestionRepository) CreateQuestion(ctx context.Context, question model.Question) (int, error) {
	ret := _m.Called(ctx, question)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) (int, error)); ok {
		return rf(ctx, question)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) int); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Question) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type IQuestionRepository_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.Question
func (_e *IQuestionRepository_Expecter) CreateQuestion(ctx interface{}, question interface{}) *IQuestionRepository_CreateQuestion_Call {
	return &IQuestionRepository_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", ctx, question)}
}

func (_c *IQuestionRepository_CreateQuestion_Call) Run(run func(ctx context.Context, question model.Question)) *IQuestionRepository_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Question))
	})
	return _c
}

func (_c *IQuestionRepository_CreateQuestion_Call) Return(_a0 int, _a1 error) *IQuestionRepository_CreateQuestion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_CreateQuestion_Call) RunAndReturn(run func(context.Context, model.Question) (int, error)) *IQuestionRepository_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionList provides a mock function with given fields: ctx
func (_m *IQuestionRepository) GetQuestionList(ctx context.Context) ([]dto.QuestionHighlight, error) {
	ret := _m.Called(ctx)

	var r0 []dto.QuestionHighlight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.QuestionHighlight, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.QuestionHighlight); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.QuestionHighlight)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQuestionRepository_GetQuestionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionList'
type IQuestionRepository_GetQuestionList_Call struct {
	*mock.Call
}

// GetQuestionList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IQuestionRepository_Expecter) GetQuestionList(ctx interface{}) *IQuestionRepository_GetQuestionList_Call {
	return &IQuestionRepository_GetQuestionList_Call{Call: _e.mock.On("GetQuestionList", ctx)}
}

func (_c *IQuestionRepository_GetQuestionList_Call) Run(run func(ctx context.Context)) *IQuestionRepository_GetQuestionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IQuestionRepository_GetQuestionList_Call) Return(_a0 []dto.QuestionHighlight, _a1 error) *IQuestionRepository_GetQuestionList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQuestionRepository_GetQuestionList_Call) RunAndReturn(run func(context.Context) ([]dto.QuestionHighlight, error)) *IQuestionRepository_GetQuestionList_Call {
	_c.Call.Return(run)
	return _c
}

// NewIQuestionRepository creates a new instance of IQuestionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIQuestionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IQuestionRepository {
	mock := &IQuestionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
