// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Hidayathamir/opendiscuss/model"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

type IUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserRepository) EXPECT() *IUserRepository_Expecter {
	return &IUserRepository_Expecter{mock: &_m.Mock}
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *IUserRepository) GetUserByUsername(ctx context.Context, username string) (model.User, error) {
	ret := _m.Called(ctx, username)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type IUserRepository_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *IUserRepository_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *IUserRepository_GetUserByUsername_Call {
	return &IUserRepository_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *IUserRepository_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *IUserRepository_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IUserRepository_GetUserByUsername_Call) Return(_a0 model.User, _a1 error) *IUserRepository_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (model.User, error)) *IUserRepository_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *IUserRepository) RegisterUser(ctx context.Context, user model.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type IUserRepository_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *IUserRepository_Expecter) RegisterUser(ctx interface{}, user interface{}) *IUserRepository_RegisterUser_Call {
	return &IUserRepository_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, user)}
}

func (_c *IUserRepository_RegisterUser_Call) Run(run func(ctx context.Context, user model.User)) *IUserRepository_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *IUserRepository_RegisterUser_Call) Return(_a0 int, _a1 error) *IUserRepository_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_RegisterUser_Call) RunAndReturn(run func(context.Context, model.User) (int, error)) *IUserRepository_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
